// Copyright (c) 2023, Intel Corporation.
// SPDX-License-Identifier: BSD-3-Clause

package huffman

import (
	"testing"
)

func TestLenLimitedCode(t *testing.T) {
	llc := NewLenLimitedCode()
	for _, data := range lenLimitedTests {
		hist := make([]int32, len(data.hist))
		moffResult := make([]int32, len(data.hist))

		copy(moffResult, data.hist)
		// check the test data if valid
		(&MoffatHuffmanCode{}).Generate(moffResult)
		if max(moffResult) != data.originMaxLen {
			t.Fatalf("excepted origin max lenghth is %d, got %d", data.originMaxLen, max(moffResult))
		}

		copy(hist, data.hist)
		llc.Generate(int(data.originMaxLen-3), hist, hist)
		if max(hist) > data.originMaxLen-3 {
			t.Fatalf("excepted LenLimitedCode can limit the code length to %d, but got %d", data.originMaxLen-3, max(hist))
		}
		if !validCodes(hist) {
			t.Fatalf("the code generated by LenLimitedCode is invalid")
		}

		copy(hist, data.hist)
		llc.Generate(int(data.originMaxLen), hist, hist)
		if !validCodes(hist) {
			t.Fatalf("the code generated by LenLimitedCode is invalid")
		}

		if !equals(hist, moffResult) {
			t.Log(hist)
			t.Log(moffResult)
			t.Fatal("while the code length is already match the limited length, it should be no any changes")
		}
	}
}

func equals[N number](a, b []N) bool {
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if b[i] != v {
			return false
		}
	}
	return true
}

var lenLimitedTests = []struct {
	hist         []int32
	originMaxLen int32
}{
	{
		[]int32{
			201, 169, 130, 162, 174, 104, 91, 241, 253, 79, 216, 57, 154, 79, 150,
			220, 85, 148, 251, 224, 135, 217, 156, 220, 170, 187, 176, 64, 62, 83, 159,
			141, 70, 100, 213, 184, 35, 210, 141, 22, 114, 124, 188, 47, 227, 49, 237,
			70, 199, 229, 117, 10, 74, 88, 8, 245, 69, 208, 160, 210, 76, 241, 30, 100,
			30, 150, 44, 157, 199, 102, 238, 15, 117, 181, 13, 128, 18, 16, 36, 63, 73,
			96, 22, 179, 103, 65, 195, 19, 44, 242, 182, 78, 216, 43, 73, 81, 135, 1, 235,
			187, 32, 133, 194, 48, 123, 175, 147, 14, 160, 153, 223, 11, 84, 66, 179, 52,
			3, 43, 201, 194, 226, 138, 124, 34, 213, 246, 38, 177, 104, 57, 193, 86, 35,
			181, 228, 200, 235, 102, 222, 248, 23, 82, 196, 231, 151, 109, 133, 99, 26,
			55, 178, 1, 124, 232, 109, 253, 182, 71, 216, 112, 55, 41, 191, 79, 48, 98,
			134, 41, 225, 66, 99, 231, 7, 222, 41, 241, 181, 242, 17, 232, 199, 215, 55,
			89, 213, 55, 44, 62, 1, 250, 223, 76, 202, 94, 156, 49, 244, 171, 83, 150, 78,
			32, 232, 231, 113, 186, 4, 245, 117, 51, 223, 157, 202, 195, 158, 119, 43, 188, 143, 87,
		},
		16,
	},
	{
		[]int32{
			234, 227, 145, 49, 61, 39, 66, 57, 251, 237, 158, 39, 93, 139, 83,
			158, 32, 204, 218, 212, 146, 161, 248, 5, 95, 147, 137, 11, 202, 138,
			159, 194, 150, 56, 1, 224, 220, 185, 154, 12, 49, 62, 214, 161, 55,
			236, 188, 239, 155, 14, 101, 218, 160, 84, 98, 234, 89, 134, 255, 65,
			60, 31, 148, 158, 217, 172, 87, 164, 28, 240, 110, 178, 184, 98, 103,
			55, 200, 221, 158, 131, 176, 166, 83, 0, 139, 131, 167, 119, 208, 67,
			146, 75, 57, 183, 138, 241, 89, 67, 53, 123, 98, 0, 218, 20, 233,
			79, 143, 250, 2, 60, 46, 192, 161, 227, 245, 225, 60, 114, 91, 218,
			122, 194, 167, 123, 140, 34, 193, 146, 184, 63, 140, 170, 36, 226, 181,
			129, 175, 227, 132, 173, 84, 239, 17, 216, 242, 253, 77, 113, 144, 76,
			81, 235, 135, 214, 9, 0, 35, 18, 97, 32, 158, 219, 119, 72, 33,
			226, 28, 114, 206, 223, 187, 25, 226, 48, 121, 136, 54, 1, 153, 8,
			83, 174, 193, 49, 167, 48, 29, 130, 1, 1, 21, 227, 75, 217, 180,
			250, 204, 27, 39, 253, 177, 108, 194, 158, 230, 80, 207, 67, 251, 255,
			246, 255, 67, 150, 193, 64, 211, 88, 243, 25,
		},
		16,
	},
	{
		[]int32{
			96, 100, 80, 65, 155, 243, 196, 146, 148, 82, 229, 89, 245, 18, 64,
			104, 200, 153, 205, 130, 204, 107, 63, 75, 186, 93, 184, 86, 196, 135,
			204, 104, 167, 153, 19, 234, 199, 18, 13, 109, 250, 231, 203, 249, 206,
			64, 38, 173, 245, 163, 43, 2, 211, 26, 196, 8, 34, 230, 18, 241,
			183, 156, 154, 99, 151, 41, 34, 248, 16, 116, 59, 228, 158, 242, 241,
			153, 119, 160, 160, 133, 69, 164, 3, 190, 213, 100, 243, 216, 110, 1,
			119, 117, 116, 207, 107, 67, 188, 57, 157, 208, 195, 225, 143, 253, 58,
			205, 250, 107, 184, 135, 175, 228, 185, 15, 50, 195, 206, 121, 80, 238,
			5, 181, 148, 69, 204, 89, 1, 191, 81, 88, 51, 117, 21, 53, 57,
			13, 117, 220, 121, 111, 236, 167, 156, 154, 29, 196, 76, 95, 224, 99,
			188, 91, 198, 214, 255, 24, 24, 190, 58, 66, 132, 142, 179, 170, 167,
			15, 121, 139, 202, 190, 236, 49, 67, 108, 116, 101, 157, 122, 231, 111,
			225, 123, 134, 135, 230, 61, 243, 245, 133, 177, 19, 149, 41, 169, 242,
			79, 182, 38, 162, 228, 226, 217, 169, 179, 226, 203, 134, 99, 243, 128,
			248, 144, 240, 74, 123, 242, 223, 26, 64, 19,
		},
		16,
	},
}
