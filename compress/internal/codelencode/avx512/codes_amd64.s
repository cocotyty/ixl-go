//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT Â·_prepareForCodeLenCode(SB), $32-32

	MOVQ h+0(FP), DI
	MOVQ dest+8(FP), SI
	MOVQ l+16(FP), DX
	MOVQ d+24(FP), CX
	ADDQ $8, SP

	LONG $0x011dbc41; WORD $0x0000 // mov    r12d, 285

LBB0_1:
	LONG $0xa73c8342; BYTE $0x00               // cmp    dword [rdi + 4*r12], 0
	JNE  LBB0_5
	LONG $0x24448d41; BYTE $0xff               // lea    eax, [r12 - 1]
	LONG $0x00873c83                           // cmp    dword [rdi + 4*rax], 0
	JNE  LBB0_6
	LONG $0xfec48349                           // add    r12, -2
	LONG $0xfffc8341                           // cmp    r12d, -1
	JNE  LBB0_1
	WORD $0x3145; BYTE $0xe4                   // xor    r12d, r12d
	LONG $0x1ebd4166; BYTE $0x00               // mov    r13w, 30
	LONG $0x04f4bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1268], 0
	JNE  LBB0_36
	JMP  LBB0_7

LBB0_5:
	LONG $0x01c48341                           // add    r12d, 1
	LONG $0x1ebd4166; BYTE $0x00               // mov    r13w, 30
	LONG $0x04f4bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1268], 0
	JNE  LBB0_36
	JMP  LBB0_7

LBB0_6:
	LONG $0xffc48341                           // add    r12d, -1
	LONG $0x01c48341                           // add    r12d, 1
	LONG $0x1ebd4166; BYTE $0x00               // mov    r13w, 30
	LONG $0x04f4bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1268], 0
	JNE  LBB0_36

LBB0_7:
	LONG $0x1dbd4166; BYTE $0x00               // mov    r13w, 29
	LONG $0x04f0bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1264], 0
	JNE  LBB0_36
	LONG $0x1cbd4166; BYTE $0x00               // mov    r13w, 28
	LONG $0x04ecbf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1260], 0
	JNE  LBB0_36
	LONG $0x1bbd4166; BYTE $0x00               // mov    r13w, 27
	LONG $0x04e8bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1256], 0
	JNE  LBB0_36
	LONG $0x1abd4166; BYTE $0x00               // mov    r13w, 26
	LONG $0x04e4bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1252], 0
	JNE  LBB0_36
	LONG $0x19bd4166; BYTE $0x00               // mov    r13w, 25
	LONG $0x04e0bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1248], 0
	JNE  LBB0_36
	LONG $0x18bd4166; BYTE $0x00               // mov    r13w, 24
	LONG $0x04dcbf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1244], 0
	JNE  LBB0_36
	LONG $0x17bd4166; BYTE $0x00               // mov    r13w, 23
	LONG $0x04d8bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1240], 0
	JNE  LBB0_36
	LONG $0x16bd4166; BYTE $0x00               // mov    r13w, 22
	LONG $0x04d4bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1236], 0
	JNE  LBB0_36
	LONG $0x15bd4166; BYTE $0x00               // mov    r13w, 21
	LONG $0x04d0bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1232], 0
	JNE  LBB0_36
	LONG $0x14bd4166; BYTE $0x00               // mov    r13w, 20
	LONG $0x04ccbf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1228], 0
	JNE  LBB0_36
	LONG $0x13bd4166; BYTE $0x00               // mov    r13w, 19
	LONG $0x04c8bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1224], 0
	JNE  LBB0_36
	LONG $0x12bd4166; BYTE $0x00               // mov    r13w, 18
	LONG $0x04c4bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1220], 0
	JNE  LBB0_36
	LONG $0x11bd4166; BYTE $0x00               // mov    r13w, 17
	LONG $0x04c0bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1216], 0
	JNE  LBB0_36
	LONG $0x10bd4166; BYTE $0x00               // mov    r13w, 16
	LONG $0x04bcbf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1212], 0
	JNE  LBB0_36
	LONG $0x0fbd4166; BYTE $0x00               // mov    r13w, 15
	LONG $0x04b8bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1208], 0
	JNE  LBB0_36
	LONG $0x0ebd4166; BYTE $0x00               // mov    r13w, 14
	LONG $0x04b4bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1204], 0
	JNE  LBB0_36
	LONG $0x0dbd4166; BYTE $0x00               // mov    r13w, 13
	LONG $0x04b0bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1200], 0
	JNE  LBB0_36
	LONG $0x0cbd4166; BYTE $0x00               // mov    r13w, 12
	LONG $0x04acbf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1196], 0
	JNE  LBB0_36
	LONG $0x0bbd4166; BYTE $0x00               // mov    r13w, 11
	LONG $0x04a8bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1192], 0
	JNE  LBB0_36
	LONG $0x0abd4166; BYTE $0x00               // mov    r13w, 10
	LONG $0x04a4bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1188], 0
	JNE  LBB0_36
	LONG $0x09bd4166; BYTE $0x00               // mov    r13w, 9
	LONG $0x04a0bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1184], 0
	JNE  LBB0_36
	LONG $0x08bd4166; BYTE $0x00               // mov    r13w, 8
	LONG $0x049cbf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1180], 0
	JNE  LBB0_36
	LONG $0x07bd4166; BYTE $0x00               // mov    r13w, 7
	LONG $0x0498bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1176], 0
	JNE  LBB0_36
	LONG $0x06bd4166; BYTE $0x00               // mov    r13w, 6
	LONG $0x0494bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1172], 0
	JNE  LBB0_36
	LONG $0x05bd4166; BYTE $0x00               // mov    r13w, 5
	LONG $0x0490bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1168], 0
	JNE  LBB0_36
	LONG $0x04bd4166; BYTE $0x00               // mov    r13w, 4
	LONG $0x048cbf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1164], 0
	JNE  LBB0_36
	LONG $0x03bd4166; BYTE $0x00               // mov    r13w, 3
	LONG $0x0488bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1160], 0
	JNE  LBB0_36
	LONG $0x02bd4166; BYTE $0x00               // mov    r13w, 2
	LONG $0x0484bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1156], 0
	JNE  LBB0_36
	WORD $0x3145; BYTE $0xed                   // xor    r13d, r13d
	LONG $0x0480bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1152], 0
	LONG $0xc5950f41                           // setne    r13b

LBB0_36:
	LONG $0xed854566               // test    r13w, r13w
	LONG $0x0001b941; WORD $0x0000 // mov    r9d, 1
	LONG $0xcd450f45               // cmovne    r9d, r13d
	LONG $0xe4854566               // test    r12w, r12w
	JE   LBB0_39
	LONG $0xd4b70f45               // movzx    r10d, r12w
	LONG $0xfc834166; BYTE $0x08   // cmp    r12w, 8
	JB   LBB0_38
	LONG $0x97048d4a               // lea    rax, [rdi + 4*r10]
	WORD $0x3948; BYTE $0xf0       // cmp    rax, rsi
	JBE  LBB0_43
	LONG $0x16048d4a               // lea    rax, [rsi + r10]
	WORD $0x3948; BYTE $0xf8       // cmp    rax, rdi
	JBE  LBB0_43

LBB0_38:
	WORD $0x3145; BYTE $0xdb // xor    r11d, r11d

LBB0_54:
	WORD $0x894d; BYTE $0xd8 // mov    r8, r11
	WORD $0xf749; BYTE $0xd0 // not    r8
	WORD $0x014d; BYTE $0xd0 // add    r8, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_56

LBB0_55:
	LONG $0x9f1c8b42         // mov    ebx, dword [rdi + 4*r11]
	WORD $0xebc1; BYTE $0x0f // shr    ebx, 15
	LONG $0x1e1c8842         // mov    byte [rsi + r11], bl
	LONG $0x01c38349         // add    r11, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_55

LBB0_56:
	LONG $0x03f88349 // cmp    r8, 3
	JB   LBB0_58

LBB0_57:
	LONG $0x9f048b42             // mov    eax, dword [rdi + 4*r11]
	WORD $0xe8c1; BYTE $0x0f     // shr    eax, 15
	LONG $0x1e048842             // mov    byte [rsi + r11], al
	LONG $0x9f448b42; BYTE $0x04 // mov    eax, dword [rdi + 4*r11 + 4]
	WORD $0xe8c1; BYTE $0x0f     // shr    eax, 15
	LONG $0x1e448842; BYTE $0x01 // mov    byte [rsi + r11 + 1], al
	LONG $0x9f448b42; BYTE $0x08 // mov    eax, dword [rdi + 4*r11 + 8]
	WORD $0xe8c1; BYTE $0x0f     // shr    eax, 15
	LONG $0x1e448842; BYTE $0x02 // mov    byte [rsi + r11 + 2], al
	LONG $0x9f448b42; BYTE $0x0c // mov    eax, dword [rdi + 4*r11 + 12]
	WORD $0xe8c1; BYTE $0x0f     // shr    eax, 15
	LONG $0x1e448842; BYTE $0x03 // mov    byte [rsi + r11 + 3], al
	LONG $0x04c38349             // add    r11, 4
	WORD $0x394d; BYTE $0xda     // cmp    r10, r11
	JNE  LBB0_57
	JMP  LBB0_58

LBB0_39:
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB0_58:
	LONG $0xd9b70f45                           // movzx    r11d, r9w
	LONG $0xfb834166; BYTE $0x08               // cmp    r11w, 8
	JB   LBB0_59
	LONG $0x16348d4e                           // lea    r14, [rsi + r10]
	LONG $0x9f048d4a                           // lea    rax, [rdi + 4*r11]
	LONG $0x04800548; WORD $0x0000             // add    rax, 1152
	WORD $0x3949; BYTE $0xc6                   // cmp    r14, rax
	JAE  LBB0_63
	LONG $0x1a048d4b                           // lea    rax, [r10 + r11]
	WORD $0x0148; BYTE $0xf0                   // add    rax, rsi
	LONG $0x809f8d48; WORD $0x0004; BYTE $0x00 // lea    rbx, [rdi + 1152]
	WORD $0x3948; BYTE $0xd8                   // cmp    rax, rbx
	JBE  LBB0_63

LBB0_59:
	WORD $0x3145; BYTE $0xc0 // xor    r8d, r8d

LBB0_77:
	WORD $0x894d; BYTE $0xc7 // mov    r15, r8
	WORD $0xf749; BYTE $0xd7 // not    r15
	WORD $0x014d; BYTE $0xdf // add    r15, r11
	WORD $0x894c; BYTE $0xdb // mov    rbx, r11
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB0_80
	LONG $0x16348d4e         // lea    r14, [rsi + r10]

LBB0_79:
	QUAD $0x0000048087848b42 // mov    eax, dword [rdi + 4*r8 + 1152]
	WORD $0xe8c1; BYTE $0x0f // shr    eax, 15
	LONG $0x06048843         // mov    byte [r14 + r8], al
	LONG $0x01c08349         // add    r8, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB0_79

LBB0_80:
	LONG $0x03ff8349 // cmp    r15, 3
	JB   LBB0_83
	LONG $0x32048d49 // lea    rax, [r10 + rsi]
	LONG $0x03c08348 // add    rax, 3

LBB0_82:
	QUAD $0x00000480879c8b42     // mov    ebx, dword [rdi + 4*r8 + 1152]
	WORD $0xebc1; BYTE $0x0f     // shr    ebx, 15
	LONG $0x005c8842; BYTE $0xfd // mov    byte [rax + r8 - 3], bl
	QUAD $0x00000484879c8b42     // mov    ebx, dword [rdi + 4*r8 + 1156]
	WORD $0xebc1; BYTE $0x0f     // shr    ebx, 15
	LONG $0x005c8842; BYTE $0xfe // mov    byte [rax + r8 - 2], bl
	QUAD $0x00000488879c8b42     // mov    ebx, dword [rdi + 4*r8 + 1160]
	WORD $0xebc1; BYTE $0x0f     // shr    ebx, 15
	LONG $0x005c8842; BYTE $0xff // mov    byte [rax + r8 - 1], bl
	QUAD $0x0000048c879c8b42     // mov    ebx, dword [rdi + 4*r8 + 1164]
	WORD $0xebc1; BYTE $0x0f     // shr    ebx, 15
	LONG $0x001c8842             // mov    byte [rax + r8], bl
	LONG $0x04c08349             // add    r8, 4
	WORD $0x394d; BYTE $0xc3     // cmp    r11, r8
	JNE  LBB0_82

LBB0_83:
	LONG $0xed854566             // test    r13w, r13w
	JNE  LBB0_85
	LONG $0x1604c642; BYTE $0x01 // mov    byte [rsi + r10], 1

LBB0_85:
	LONG $0x22894466 // mov    word [rdx], r12w
	LONG $0x09894466 // mov    word [rcx], r9w
	SUBQ $8, SP
	VZEROUPPER
	RET

LBB0_63:
	LONG $0xf9834166; BYTE $0x10 // cmp    r9w, 16
	JAE  LBB0_68
	WORD $0x3145; BYTE $0xc0     // xor    r8d, r8d

LBB0_65:
	WORD $0x894c; BYTE $0xc0 // mov    rax, r8
	WORD $0x8945; BYTE $0xd8 // mov    r8d, r11d
	LONG $0xf8e08341         // and    r8d, -8

LBB0_66:
	QUAD $0x00048087846ffec5; BYTE $0x00 // vmovdqu    ymm0, yword [rdi + 4*rax + 1152]
	LONG $0xd072fdc5; BYTE $0x0f         // vpsrld    ymm0, ymm0, 15
	LONG $0x487ef262; WORD $0xc031       // vpmovdb    xmm0, zmm0
	LONG $0xd679c1c4; WORD $0x0604       // vmovq    qword [r14 + rax], xmm0
	LONG $0x08c08348                     // add    rax, 8
	WORD $0x3949; BYTE $0xc0             // cmp    r8, rax
	JNE  LBB0_66
	WORD $0x394d; BYTE $0xd8             // cmp    r8, r11
	JNE  LBB0_77
	JMP  LBB0_83

LBB0_43:
	LONG $0xfc834166; BYTE $0x40 // cmp    r12w, 64
	JAE  LBB0_45
	WORD $0x3145; BYTE $0xdb     // xor    r11d, r11d
	JMP  LBB0_51

LBB0_68:
	LONG $0x246c8944; BYTE $0x0c // mov    dword [rsp + 12], r13d
	WORD $0x8948; BYTE $0xd3     // mov    rbx, rdx
	LONG $0x244c8948; BYTE $0x10 // mov    qword [rsp + 16], rcx
	WORD $0x8945; BYTE $0xd8     // mov    r8d, r11d
	LONG $0xf0e08341             // and    r8d, -16
	LONG $0xf0408d49             // lea    rax, [r8 - 16]
	WORD $0x8949; BYTE $0xc5     // mov    r13, rax
	LONG $0x04edc149             // shr    r13, 4
	LONG $0x01c58349             // add    r13, 1
	WORD $0x8945; BYTE $0xef     // mov    r15d, r13d
	LONG $0x03e78341             // and    r15d, 3
	LONG $0x30f88348             // cmp    rax, 48
	JAE  LBB0_70
	WORD $0xc031                 // xor    eax, eax
	JMP  LBB0_72

LBB0_45:
	WORD $0x8945; BYTE $0xd3                   // mov    r11d, r10d
	LONG $0x487df162; WORD $0x1772; BYTE $0x0f // vpsrld    zmm0, zmmword [rdi], 15
	QUAD $0x0f0157724875f162                   // vpsrld    zmm1, zmmword [rdi + 64], 15
	QUAD $0x0f025772486df162                   // vpsrld    zmm2, zmmword [rdi + 128], 15
	QUAD $0x0f0357724865f162                   // vpsrld    zmm3, zmmword [rdi + 192], 15
	LONG $0x487ef262; WORD $0x0631             // vpmovdb    oword [rsi], zmm0
	LONG $0x487ef262; WORD $0x4e31; BYTE $0x01 // vpmovdb    oword [rsi + 16], zmm1
	LONG $0x487ef262; WORD $0x5631; BYTE $0x02 // vpmovdb    oword [rsi + 32], zmm2
	LONG $0xc0e38341                           // and    r11d, -64
	LONG $0x487ef262; WORD $0x5e31; BYTE $0x03 // vpmovdb    oword [rsi + 48], zmm3
	LONG $0x40fb8349                           // cmp    r11, 64
	JE   LBB0_49
	QUAD $0x0f045772487df162                   // vpsrld    zmm0, zmmword [rdi + 256], 15
	QUAD $0x0f0557724875f162                   // vpsrld    zmm1, zmmword [rdi + 320], 15
	QUAD $0x0f065772486df162                   // vpsrld    zmm2, zmmword [rdi + 384], 15
	QUAD $0x0f0757724865f162                   // vpsrld    zmm3, zmmword [rdi + 448], 15
	LONG $0x487ef262; WORD $0x4631; BYTE $0x04 // vpmovdb    oword [rsi + 64], zmm0
	LONG $0x487ef262; WORD $0x4e31; BYTE $0x05 // vpmovdb    oword [rsi + 80], zmm1
	LONG $0x487ef262; WORD $0x5631; BYTE $0x06 // vpmovdb    oword [rsi + 96], zmm2
	LONG $0x487ef262; WORD $0x5e31; BYTE $0x07 // vpmovdb    oword [rsi + 112], zmm3
	LONG $0x80fb8141; WORD $0x0000; BYTE $0x00 // cmp    r11d, 128
	JE   LBB0_49
	QUAD $0x0f085772487df162                   // vpsrld    zmm0, zmmword [rdi + 512], 15
	QUAD $0x0f0957724875f162                   // vpsrld    zmm1, zmmword [rdi + 576], 15
	QUAD $0x0f0a5772486df162                   // vpsrld    zmm2, zmmword [rdi + 640], 15
	QUAD $0x0f0b57724865f162                   // vpsrld    zmm3, zmmword [rdi + 704], 15
	LONG $0x487ef262; WORD $0x4631; BYTE $0x08 // vpmovdb    oword [rsi + 128], zmm0
	LONG $0x487ef262; WORD $0x4e31; BYTE $0x09 // vpmovdb    oword [rsi + 144], zmm1
	LONG $0x487ef262; WORD $0x5631; BYTE $0x0a // vpmovdb    oword [rsi + 160], zmm2
	LONG $0x487ef262; WORD $0x5e31; BYTE $0x0b // vpmovdb    oword [rsi + 176], zmm3
	LONG $0xc0fb8141; WORD $0x0000; BYTE $0x00 // cmp    r11d, 192
	JE   LBB0_49
	QUAD $0x0f0c5772487df162                   // vpsrld    zmm0, zmmword [rdi + 768], 15
	QUAD $0x0f0d57724875f162                   // vpsrld    zmm1, zmmword [rdi + 832], 15
	QUAD $0x0f0e5772486df162                   // vpsrld    zmm2, zmmword [rdi + 896], 15
	QUAD $0x0f0f57724865f162                   // vpsrld    zmm3, zmmword [rdi + 960], 15
	LONG $0x487ef262; WORD $0x4631; BYTE $0x0c // vpmovdb    oword [rsi + 192], zmm0
	LONG $0x487ef262; WORD $0x4e31; BYTE $0x0d // vpmovdb    oword [rsi + 208], zmm1
	LONG $0x487ef262; WORD $0x5631; BYTE $0x0e // vpmovdb    oword [rsi + 224], zmm2
	LONG $0x487ef262; WORD $0x5e31; BYTE $0x0f // vpmovdb    oword [rsi + 240], zmm3

LBB0_49:
	WORD $0x394d; BYTE $0xd3 // cmp    r11, r10
	JE   LBB0_58
	LONG $0x38c2f641         // test    r10b, 56
	JE   LBB0_54

LBB0_51:
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	WORD $0x8945; BYTE $0xd3 // mov    r11d, r10d
	LONG $0xf8e38341         // and    r11d, -8

LBB0_52:
	LONG $0x046ffec5; BYTE $0x87   // vmovdqu    ymm0, yword [rdi + 4*rax]
	LONG $0xd072fdc5; BYTE $0x0f   // vpsrld    ymm0, ymm0, 15
	LONG $0x487ef262; WORD $0xc031 // vpmovdb    xmm0, zmm0
	LONG $0x04d6f9c5; BYTE $0x06   // vmovq    qword [rsi + rax], xmm0
	LONG $0x08c08348               // add    rax, 8
	WORD $0x3949; BYTE $0xc3       // cmp    r11, rax
	JNE  LBB0_52
	WORD $0x394d; BYTE $0xd3       // cmp    r11, r10
	JE   LBB0_58
	JMP  LBB0_54

LBB0_70:
	LONG $0xfce58349 // and    r13, -4
	LONG $0x320c8d49 // lea    rcx, [r10 + rsi]
	LONG $0x30c18348 // add    rcx, 48
	WORD $0xc031     // xor    eax, eax

LBB0_71:
	QUAD $0x12875472487df162; BYTE $0x0f       // vpsrld    zmm0, zmmword [rdi + 4*rax + 1152], 15
	QUAD $0xfd014431487ef262                   // vpmovdb    oword [rcx + rax - 48], zmm0
	QUAD $0x13875472487df162; BYTE $0x0f       // vpsrld    zmm0, zmmword [rdi + 4*rax + 1216], 15
	QUAD $0xfe014431487ef262                   // vpmovdb    oword [rcx + rax - 32], zmm0
	QUAD $0x14875472487df162; BYTE $0x0f       // vpsrld    zmm0, zmmword [rdi + 4*rax + 1280], 15
	QUAD $0xff014431487ef262                   // vpmovdb    oword [rcx + rax - 16], zmm0
	QUAD $0x15875472487df162; BYTE $0x0f       // vpsrld    zmm0, zmmword [rdi + 4*rax + 1344], 15
	LONG $0x487ef262; WORD $0x0431; BYTE $0x01 // vpmovdb    oword [rcx + rax], zmm0
	LONG $0x40c08348                           // add    rax, 64
	LONG $0xfcc58349                           // add    r13, -4
	JNE  LBB0_71

LBB0_72:
	WORD $0x854d; BYTE $0xff       // test    r15, r15
	JE   LBB0_75
	LONG $0x020c8d49               // lea    rcx, [r10 + rax]
	WORD $0x0148; BYTE $0xf1       // add    rcx, rsi
	LONG $0x87048d48               // lea    rax, [rdi + 4*rax]
	LONG $0x04800548; WORD $0x0000 // add    rax, 1152
	LONG $0x04e7c149               // shl    r15, 4
	WORD $0xd231                   // xor    edx, edx

LBB0_74:
	QUAD $0x0f901472487df162                   // vpsrld    zmm0, zmmword [rax + 4*rdx], 15
	LONG $0x487ef262; WORD $0x0431; BYTE $0x11 // vpmovdb    oword [rcx + rdx], zmm0
	LONG $0x10c28348                           // add    rdx, 16
	WORD $0x3949; BYTE $0xd7                   // cmp    r15, rdx
	JNE  LBB0_74

LBB0_75:
	WORD $0x394d; BYTE $0xd8     // cmp    r8, r11
	LONG $0x244c8b48; BYTE $0x10 // mov    rcx, qword [rsp + 16]
	WORD $0x8948; BYTE $0xda     // mov    rdx, rbx
	LONG $0x246c8b44; BYTE $0x0c // mov    r13d, dword [rsp + 12]
	JE   LBB0_83
	LONG $0x08c3f641             // test    r11b, 8
	JNE  LBB0_65
	JMP  LBB0_77
