//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x000000000c080400
DATA LCDATA1<>+0x008(SB)/8, $0x0000000000000000
GLOBL LCDATA1<>(SB), 8, $16

TEXT Â·_prepareForCodeLenCode(SB), $0-32

	MOVQ h+0(FP), DI
	MOVQ dest+8(FP), SI
	MOVQ l+16(FP), DX
	MOVQ d+24(FP), CX
	LEAQ LCDATA1<>(SB), BP

	LONG $0x011dbb41; WORD $0x0000 // mov    r11d, 285

LBB0_1:
	LONG $0x9f3c8342; BYTE $0x00               // cmp    dword [rdi + 4*r11], 0
	JNE  LBB0_5
	LONG $0xff438d41                           // lea    eax, [r11 - 1]
	LONG $0x00873c83                           // cmp    dword [rdi + 4*rax], 0
	JNE  LBB0_6
	LONG $0xfec38349                           // add    r11, -2
	LONG $0xfffb8341                           // cmp    r11d, -1
	JNE  LBB0_1
	WORD $0x3145; BYTE $0xdb                   // xor    r11d, r11d
	LONG $0x1eb84166; BYTE $0x00               // mov    r8w, 30
	LONG $0x04f4bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1268], 0
	JNE  LBB0_36
	JMP  LBB0_7

LBB0_5:
	LONG $0x01c38341                           // add    r11d, 1
	LONG $0x1eb84166; BYTE $0x00               // mov    r8w, 30
	LONG $0x04f4bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1268], 0
	JNE  LBB0_36
	JMP  LBB0_7

LBB0_6:
	LONG $0xffc38341                           // add    r11d, -1
	LONG $0x01c38341                           // add    r11d, 1
	LONG $0x1eb84166; BYTE $0x00               // mov    r8w, 30
	LONG $0x04f4bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1268], 0
	JNE  LBB0_36

LBB0_7:
	LONG $0x1db84166; BYTE $0x00               // mov    r8w, 29
	LONG $0x04f0bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1264], 0
	JNE  LBB0_36
	LONG $0x1cb84166; BYTE $0x00               // mov    r8w, 28
	LONG $0x04ecbf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1260], 0
	JNE  LBB0_36
	LONG $0x1bb84166; BYTE $0x00               // mov    r8w, 27
	LONG $0x04e8bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1256], 0
	JNE  LBB0_36
	LONG $0x1ab84166; BYTE $0x00               // mov    r8w, 26
	LONG $0x04e4bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1252], 0
	JNE  LBB0_36
	LONG $0x19b84166; BYTE $0x00               // mov    r8w, 25
	LONG $0x04e0bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1248], 0
	JNE  LBB0_36
	LONG $0x18b84166; BYTE $0x00               // mov    r8w, 24
	LONG $0x04dcbf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1244], 0
	JNE  LBB0_36
	LONG $0x17b84166; BYTE $0x00               // mov    r8w, 23
	LONG $0x04d8bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1240], 0
	JNE  LBB0_36
	LONG $0x16b84166; BYTE $0x00               // mov    r8w, 22
	LONG $0x04d4bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1236], 0
	JNE  LBB0_36
	LONG $0x15b84166; BYTE $0x00               // mov    r8w, 21
	LONG $0x04d0bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1232], 0
	JNE  LBB0_36
	LONG $0x14b84166; BYTE $0x00               // mov    r8w, 20
	LONG $0x04ccbf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1228], 0
	JNE  LBB0_36
	LONG $0x13b84166; BYTE $0x00               // mov    r8w, 19
	LONG $0x04c8bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1224], 0
	JNE  LBB0_36
	LONG $0x12b84166; BYTE $0x00               // mov    r8w, 18
	LONG $0x04c4bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1220], 0
	JNE  LBB0_36
	LONG $0x11b84166; BYTE $0x00               // mov    r8w, 17
	LONG $0x04c0bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1216], 0
	JNE  LBB0_36
	LONG $0x10b84166; BYTE $0x00               // mov    r8w, 16
	LONG $0x04bcbf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1212], 0
	JNE  LBB0_36
	LONG $0x0fb84166; BYTE $0x00               // mov    r8w, 15
	LONG $0x04b8bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1208], 0
	JNE  LBB0_36
	LONG $0x0eb84166; BYTE $0x00               // mov    r8w, 14
	LONG $0x04b4bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1204], 0
	JNE  LBB0_36
	LONG $0x0db84166; BYTE $0x00               // mov    r8w, 13
	LONG $0x04b0bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1200], 0
	JNE  LBB0_36
	LONG $0x0cb84166; BYTE $0x00               // mov    r8w, 12
	LONG $0x04acbf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1196], 0
	JNE  LBB0_36
	LONG $0x0bb84166; BYTE $0x00               // mov    r8w, 11
	LONG $0x04a8bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1192], 0
	JNE  LBB0_36
	LONG $0x0ab84166; BYTE $0x00               // mov    r8w, 10
	LONG $0x04a4bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1188], 0
	JNE  LBB0_36
	LONG $0x09b84166; BYTE $0x00               // mov    r8w, 9
	LONG $0x04a0bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1184], 0
	JNE  LBB0_36
	LONG $0x08b84166; BYTE $0x00               // mov    r8w, 8
	LONG $0x049cbf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1180], 0
	JNE  LBB0_36
	LONG $0x07b84166; BYTE $0x00               // mov    r8w, 7
	LONG $0x0498bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1176], 0
	JNE  LBB0_36
	LONG $0x06b84166; BYTE $0x00               // mov    r8w, 6
	LONG $0x0494bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1172], 0
	JNE  LBB0_36
	LONG $0x05b84166; BYTE $0x00               // mov    r8w, 5
	LONG $0x0490bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1168], 0
	JNE  LBB0_36
	LONG $0x04b84166; BYTE $0x00               // mov    r8w, 4
	LONG $0x048cbf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1164], 0
	JNE  LBB0_36
	LONG $0x03b84166; BYTE $0x00               // mov    r8w, 3
	LONG $0x0488bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1160], 0
	JNE  LBB0_36
	LONG $0x02b84166; BYTE $0x00               // mov    r8w, 2
	LONG $0x0484bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1156], 0
	JNE  LBB0_36
	WORD $0x3145; BYTE $0xc0                   // xor    r8d, r8d
	LONG $0x0480bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1152], 0
	LONG $0xc0950f41                           // setne    r8b

LBB0_36:
	LONG $0xc0854566               // test    r8w, r8w
	LONG $0x0001b941; WORD $0x0000 // mov    r9d, 1
	LONG $0xc8450f45               // cmovne    r9d, r8d
	LONG $0xdb854566               // test    r11w, r11w
	JE   LBB0_39
	LONG $0xd3b70f45               // movzx    r10d, r11w
	LONG $0xfb834166; BYTE $0x20   // cmp    r11w, 32
	JB   LBB0_38
	LONG $0x97048d4a               // lea    rax, [rdi + 4*r10]
	WORD $0x3948; BYTE $0xf0       // cmp    rax, rsi
	JBE  LBB0_43
	LONG $0x16048d4a               // lea    rax, [rsi + r10]
	WORD $0x3948; BYTE $0xf8       // cmp    rax, rdi
	JBE  LBB0_43

LBB0_38:
	WORD $0x3145; BYTE $0xff // xor    r15d, r15d

LBB0_52:
	WORD $0x894d; BYTE $0xfe // mov    r14, r15
	WORD $0xf749; BYTE $0xd6 // not    r14
	WORD $0x014d; BYTE $0xd6 // add    r14, r10
	WORD $0x894c; BYTE $0xd3 // mov    rbx, r10
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB0_54

LBB0_53:
	LONG $0xbf048b42         // mov    eax, dword [rdi + 4*r15]
	WORD $0xe8c1; BYTE $0x0f // shr    eax, 15
	LONG $0x3e048842         // mov    byte [rsi + r15], al
	LONG $0x01c78349         // add    r15, 1
	LONG $0xffc38348         // add    rbx, -1
	JNE  LBB0_53

LBB0_54:
	LONG $0x03fe8349 // cmp    r14, 3
	JB   LBB0_56

LBB0_55:
	LONG $0xbf048b42             // mov    eax, dword [rdi + 4*r15]
	WORD $0xe8c1; BYTE $0x0f     // shr    eax, 15
	LONG $0x3e048842             // mov    byte [rsi + r15], al
	LONG $0xbf448b42; BYTE $0x04 // mov    eax, dword [rdi + 4*r15 + 4]
	WORD $0xe8c1; BYTE $0x0f     // shr    eax, 15
	LONG $0x3e448842; BYTE $0x01 // mov    byte [rsi + r15 + 1], al
	LONG $0xbf448b42; BYTE $0x08 // mov    eax, dword [rdi + 4*r15 + 8]
	WORD $0xe8c1; BYTE $0x0f     // shr    eax, 15
	LONG $0x3e448842; BYTE $0x02 // mov    byte [rsi + r15 + 2], al
	LONG $0xbf448b42; BYTE $0x0c // mov    eax, dword [rdi + 4*r15 + 12]
	WORD $0xe8c1; BYTE $0x0f     // shr    eax, 15
	LONG $0x3e448842; BYTE $0x03 // mov    byte [rsi + r15 + 3], al
	LONG $0x04c78349             // add    r15, 4
	WORD $0x394d; BYTE $0xfa     // cmp    r10, r15
	JNE  LBB0_55
	JMP  LBB0_56

LBB0_39:
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB0_56:
	LONG $0xf9b70f45                           // movzx    r15d, r9w
	LONG $0xff834166; BYTE $0x08               // cmp    r15w, 8
	JB   LBB0_57
	LONG $0x16048d4a                           // lea    rax, [rsi + r10]
	LONG $0xbf1c8d4a                           // lea    rbx, [rdi + 4*r15]
	LONG $0x80c38148; WORD $0x0004; BYTE $0x00 // add    rbx, 1152
	WORD $0x3948; BYTE $0xd8                   // cmp    rax, rbx
	JAE  LBB0_61
	LONG $0x3a048d4b                           // lea    rax, [r10 + r15]
	WORD $0x0148; BYTE $0xf0                   // add    rax, rsi
	LONG $0x809f8d48; WORD $0x0004; BYTE $0x00 // lea    rbx, [rdi + 1152]
	WORD $0x3948; BYTE $0xd8                   // cmp    rax, rbx
	JBE  LBB0_61

LBB0_57:
	WORD $0x3145; BYTE $0xf6 // xor    r14d, r14d

LBB0_69:
	WORD $0x894d; BYTE $0xf5 // mov    r13, r14
	WORD $0xf749; BYTE $0xd5 // not    r13
	WORD $0x014d; BYTE $0xfd // add    r13, r15
	WORD $0x894c; BYTE $0xf8 // mov    rax, r15
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_72
	LONG $0x16248d4e         // lea    r12, [rsi + r10]

LBB0_71:
	QUAD $0x00000480b79c8b42 // mov    ebx, dword [rdi + 4*r14 + 1152]
	WORD $0xebc1; BYTE $0x0f // shr    ebx, 15
	LONG $0x341c8843         // mov    byte [r12 + r14], bl
	LONG $0x01c68349         // add    r14, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_71

LBB0_72:
	LONG $0x03fd8349 // cmp    r13, 3
	JB   LBB0_75
	LONG $0x32048d49 // lea    rax, [r10 + rsi]
	LONG $0x03c08348 // add    rax, 3

LBB0_74:
	QUAD $0x00000480b79c8b42     // mov    ebx, dword [rdi + 4*r14 + 1152]
	WORD $0xebc1; BYTE $0x0f     // shr    ebx, 15
	LONG $0x305c8842; BYTE $0xfd // mov    byte [rax + r14 - 3], bl
	QUAD $0x00000484b79c8b42     // mov    ebx, dword [rdi + 4*r14 + 1156]
	WORD $0xebc1; BYTE $0x0f     // shr    ebx, 15
	LONG $0x305c8842; BYTE $0xfe // mov    byte [rax + r14 - 2], bl
	QUAD $0x00000488b79c8b42     // mov    ebx, dword [rdi + 4*r14 + 1160]
	WORD $0xebc1; BYTE $0x0f     // shr    ebx, 15
	LONG $0x305c8842; BYTE $0xff // mov    byte [rax + r14 - 1], bl
	QUAD $0x0000048cb79c8b42     // mov    ebx, dword [rdi + 4*r14 + 1164]
	WORD $0xebc1; BYTE $0x0f     // shr    ebx, 15
	LONG $0x301c8842             // mov    byte [rax + r14], bl
	LONG $0x04c68349             // add    r14, 4
	WORD $0x394d; BYTE $0xf7     // cmp    r15, r14
	JNE  LBB0_74
	JMP  LBB0_75

LBB0_61:
	WORD $0x8945; BYTE $0xfe // mov    r14d, r15d
	LONG $0xf8e68341         // and    r14d, -8
	LONG $0xf8468d49         // lea    rax, [r14 - 8]
	WORD $0x8949; BYTE $0xc4 // mov    r12, rax
	LONG $0x03ecc149         // shr    r12, 3
	LONG $0x01c48349         // add    r12, 1
	WORD $0x8944; BYTE $0xe3 // mov    ebx, r12d
	WORD $0xe383; BYTE $0x03 // and    ebx, 3
	LONG $0x18f88348         // cmp    rax, 24
	JAE  LBB0_63
	WORD $0xc031             // xor    eax, eax
	JMP  LBB0_65

LBB0_43:
	WORD $0x8945; BYTE $0xd7                   // mov    r15d, r10d
	LONG $0xe0e78341                           // and    r15d, -32
	LONG $0x076ffec5                           // vmovdqu    ymm0, yword [rdi]
	LONG $0x4f6ffec5; BYTE $0x20               // vmovdqu    ymm1, yword [rdi + 32]
	LONG $0x576ffec5; BYTE $0x40               // vmovdqu    ymm2, yword [rdi + 64]
	LONG $0x5f6ffec5; BYTE $0x60               // vmovdqu    ymm3, yword [rdi + 96]
	LONG $0xd072ddc5; BYTE $0x0f               // vpsrld    ymm4, ymm0, 15
	LONG $0xd172f5c5; BYTE $0x0f               // vpsrld    ymm1, ymm1, 15
	LONG $0xd272edc5; BYTE $0x0f               // vpsrld    ymm2, ymm2, 15
	LONG $0xd372e5c5; BYTE $0x0f               // vpsrld    ymm3, ymm3, 15
	LONG $0x397de3c4; WORD $0x01e5             // vextracti128    xmm5, ymm4, 1
	LONG $0x456ff9c5; BYTE $0x00               // vmovdqa    xmm0, oword 0[rbp] /* [rip + .LCPI0_0] */
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0059e2c4; BYTE $0xe0               // vpshufb    xmm4, xmm4, xmm0
	LONG $0xe562d9c5                           // vpunpckldq    xmm4, xmm4, xmm5
	LONG $0x397de3c4; WORD $0x01cd             // vextracti128    xmm5, ymm1, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xcd62f1c5                           // vpunpckldq    xmm1, xmm1, xmm5
	LONG $0x397de3c4; WORD $0x01d5             // vextracti128    xmm5, ymm2, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0xd562e9c5                           // vpunpckldq    xmm2, xmm2, xmm5
	LONG $0x397de3c4; WORD $0x01dd             // vextracti128    xmm5, ymm3, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0061e2c4; BYTE $0xd8               // vpshufb    xmm3, xmm3, xmm0
	LONG $0xdd62e1c5                           // vpunpckldq    xmm3, xmm3, xmm5
	LONG $0x386de3c4; WORD $0x01d3             // vinserti128    ymm2, ymm2, xmm3, 1
	LONG $0x385de3c4; WORD $0x01c9             // vinserti128    ymm1, ymm4, xmm1, 1
	LONG $0xca6cf5c5                           // vpunpcklqdq    ymm1, ymm1, ymm2
	LONG $0x00fde3c4; WORD $0xd8c9             // vpermq    ymm1, ymm1, 216
	LONG $0x0e7ffec5                           // vmovdqu    yword [rsi], ymm1
	LONG $0x20ff8349                           // cmp    r15, 32
	JE   LBB0_51
	QUAD $0x000000808f6ffec5                   // vmovdqu    ymm1, yword [rdi + 128]
	QUAD $0x000000a0976ffec5                   // vmovdqu    ymm2, yword [rdi + 160]
	QUAD $0x000000c09f6ffec5                   // vmovdqu    ymm3, yword [rdi + 192]
	QUAD $0x000000e0a76ffec5                   // vmovdqu    ymm4, yword [rdi + 224]
	LONG $0xd172f5c5; BYTE $0x0f               // vpsrld    ymm1, ymm1, 15
	LONG $0xd272edc5; BYTE $0x0f               // vpsrld    ymm2, ymm2, 15
	LONG $0xd372e5c5; BYTE $0x0f               // vpsrld    ymm3, ymm3, 15
	LONG $0xd472ddc5; BYTE $0x0f               // vpsrld    ymm4, ymm4, 15
	LONG $0x397de3c4; WORD $0x01cd             // vextracti128    xmm5, ymm1, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xcd62f1c5                           // vpunpckldq    xmm1, xmm1, xmm5
	LONG $0x397de3c4; WORD $0x01d5             // vextracti128    xmm5, ymm2, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0xd562e9c5                           // vpunpckldq    xmm2, xmm2, xmm5
	LONG $0x397de3c4; WORD $0x01dd             // vextracti128    xmm5, ymm3, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0061e2c4; BYTE $0xd8               // vpshufb    xmm3, xmm3, xmm0
	LONG $0xdd62e1c5                           // vpunpckldq    xmm3, xmm3, xmm5
	LONG $0x397de3c4; WORD $0x01e5             // vextracti128    xmm5, ymm4, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0059e2c4; BYTE $0xe0               // vpshufb    xmm4, xmm4, xmm0
	LONG $0xe562d9c5                           // vpunpckldq    xmm4, xmm4, xmm5
	LONG $0x3865e3c4; WORD $0x01dc             // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                           // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9             // vpermq    ymm1, ymm1, 216
	LONG $0x4e7ffec5; BYTE $0x20               // vmovdqu    yword [rsi + 32], ymm1
	LONG $0x40ff8341                           // cmp    r15d, 64
	JE   LBB0_51
	QUAD $0x000001008f6ffec5                   // vmovdqu    ymm1, yword [rdi + 256]
	QUAD $0x00000120976ffec5                   // vmovdqu    ymm2, yword [rdi + 288]
	QUAD $0x000001409f6ffec5                   // vmovdqu    ymm3, yword [rdi + 320]
	QUAD $0x00000160a76ffec5                   // vmovdqu    ymm4, yword [rdi + 352]
	LONG $0xd172f5c5; BYTE $0x0f               // vpsrld    ymm1, ymm1, 15
	LONG $0xd272edc5; BYTE $0x0f               // vpsrld    ymm2, ymm2, 15
	LONG $0xd372e5c5; BYTE $0x0f               // vpsrld    ymm3, ymm3, 15
	LONG $0xd472ddc5; BYTE $0x0f               // vpsrld    ymm4, ymm4, 15
	LONG $0x397de3c4; WORD $0x01cd             // vextracti128    xmm5, ymm1, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xcd62f1c5                           // vpunpckldq    xmm1, xmm1, xmm5
	LONG $0x397de3c4; WORD $0x01d5             // vextracti128    xmm5, ymm2, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0xd562e9c5                           // vpunpckldq    xmm2, xmm2, xmm5
	LONG $0x397de3c4; WORD $0x01dd             // vextracti128    xmm5, ymm3, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0061e2c4; BYTE $0xd8               // vpshufb    xmm3, xmm3, xmm0
	LONG $0xdd62e1c5                           // vpunpckldq    xmm3, xmm3, xmm5
	LONG $0x397de3c4; WORD $0x01e5             // vextracti128    xmm5, ymm4, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0059e2c4; BYTE $0xe0               // vpshufb    xmm4, xmm4, xmm0
	LONG $0xe562d9c5                           // vpunpckldq    xmm4, xmm4, xmm5
	LONG $0x3865e3c4; WORD $0x01dc             // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                           // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9             // vpermq    ymm1, ymm1, 216
	LONG $0x4e7ffec5; BYTE $0x40               // vmovdqu    yword [rsi + 64], ymm1
	LONG $0x60ff8341                           // cmp    r15d, 96
	JE   LBB0_51
	QUAD $0x000001808f6ffec5                   // vmovdqu    ymm1, yword [rdi + 384]
	QUAD $0x000001a0976ffec5                   // vmovdqu    ymm2, yword [rdi + 416]
	QUAD $0x000001c09f6ffec5                   // vmovdqu    ymm3, yword [rdi + 448]
	QUAD $0x000001e0a76ffec5                   // vmovdqu    ymm4, yword [rdi + 480]
	LONG $0xd172f5c5; BYTE $0x0f               // vpsrld    ymm1, ymm1, 15
	LONG $0xd272edc5; BYTE $0x0f               // vpsrld    ymm2, ymm2, 15
	LONG $0xd372e5c5; BYTE $0x0f               // vpsrld    ymm3, ymm3, 15
	LONG $0xd472ddc5; BYTE $0x0f               // vpsrld    ymm4, ymm4, 15
	LONG $0x397de3c4; WORD $0x01cd             // vextracti128    xmm5, ymm1, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xcd62f1c5                           // vpunpckldq    xmm1, xmm1, xmm5
	LONG $0x397de3c4; WORD $0x01d5             // vextracti128    xmm5, ymm2, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0xd562e9c5                           // vpunpckldq    xmm2, xmm2, xmm5
	LONG $0x397de3c4; WORD $0x01dd             // vextracti128    xmm5, ymm3, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0061e2c4; BYTE $0xd8               // vpshufb    xmm3, xmm3, xmm0
	LONG $0xdd62e1c5                           // vpunpckldq    xmm3, xmm3, xmm5
	LONG $0x397de3c4; WORD $0x01e5             // vextracti128    xmm5, ymm4, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0059e2c4; BYTE $0xe0               // vpshufb    xmm4, xmm4, xmm0
	LONG $0xe562d9c5                           // vpunpckldq    xmm4, xmm4, xmm5
	LONG $0x3865e3c4; WORD $0x01dc             // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                           // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9             // vpermq    ymm1, ymm1, 216
	LONG $0x4e7ffec5; BYTE $0x60               // vmovdqu    yword [rsi + 96], ymm1
	LONG $0x80ff8141; WORD $0x0000; BYTE $0x00 // cmp    r15d, 128
	JE   LBB0_51
	QUAD $0x000002008f6ffec5                   // vmovdqu    ymm1, yword [rdi + 512]
	QUAD $0x00000220976ffec5                   // vmovdqu    ymm2, yword [rdi + 544]
	QUAD $0x000002409f6ffec5                   // vmovdqu    ymm3, yword [rdi + 576]
	QUAD $0x00000260a76ffec5                   // vmovdqu    ymm4, yword [rdi + 608]
	LONG $0xd172f5c5; BYTE $0x0f               // vpsrld    ymm1, ymm1, 15
	LONG $0xd272edc5; BYTE $0x0f               // vpsrld    ymm2, ymm2, 15
	LONG $0xd372e5c5; BYTE $0x0f               // vpsrld    ymm3, ymm3, 15
	LONG $0xd472ddc5; BYTE $0x0f               // vpsrld    ymm4, ymm4, 15
	LONG $0x397de3c4; WORD $0x01cd             // vextracti128    xmm5, ymm1, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xcd62f1c5                           // vpunpckldq    xmm1, xmm1, xmm5
	LONG $0x397de3c4; WORD $0x01d5             // vextracti128    xmm5, ymm2, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0xd562e9c5                           // vpunpckldq    xmm2, xmm2, xmm5
	LONG $0x397de3c4; WORD $0x01dd             // vextracti128    xmm5, ymm3, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0061e2c4; BYTE $0xd8               // vpshufb    xmm3, xmm3, xmm0
	LONG $0xdd62e1c5                           // vpunpckldq    xmm3, xmm3, xmm5
	LONG $0x397de3c4; WORD $0x01e5             // vextracti128    xmm5, ymm4, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0059e2c4; BYTE $0xe0               // vpshufb    xmm4, xmm4, xmm0
	LONG $0xe562d9c5                           // vpunpckldq    xmm4, xmm4, xmm5
	LONG $0x3865e3c4; WORD $0x01dc             // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                           // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9             // vpermq    ymm1, ymm1, 216
	QUAD $0x000000808e7ffec5                   // vmovdqu    yword [rsi + 128], ymm1
	LONG $0xa0ff8141; WORD $0x0000; BYTE $0x00 // cmp    r15d, 160
	JE   LBB0_51
	QUAD $0x000002808f6ffec5                   // vmovdqu    ymm1, yword [rdi + 640]
	QUAD $0x000002a0976ffec5                   // vmovdqu    ymm2, yword [rdi + 672]
	QUAD $0x000002c09f6ffec5                   // vmovdqu    ymm3, yword [rdi + 704]
	QUAD $0x000002e0a76ffec5                   // vmovdqu    ymm4, yword [rdi + 736]
	LONG $0xd172f5c5; BYTE $0x0f               // vpsrld    ymm1, ymm1, 15
	LONG $0xd272edc5; BYTE $0x0f               // vpsrld    ymm2, ymm2, 15
	LONG $0xd372e5c5; BYTE $0x0f               // vpsrld    ymm3, ymm3, 15
	LONG $0xd472ddc5; BYTE $0x0f               // vpsrld    ymm4, ymm4, 15
	LONG $0x397de3c4; WORD $0x01cd             // vextracti128    xmm5, ymm1, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xcd62f1c5                           // vpunpckldq    xmm1, xmm1, xmm5
	LONG $0x397de3c4; WORD $0x01d5             // vextracti128    xmm5, ymm2, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0xd562e9c5                           // vpunpckldq    xmm2, xmm2, xmm5
	LONG $0x397de3c4; WORD $0x01dd             // vextracti128    xmm5, ymm3, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0061e2c4; BYTE $0xd8               // vpshufb    xmm3, xmm3, xmm0
	LONG $0xdd62e1c5                           // vpunpckldq    xmm3, xmm3, xmm5
	LONG $0x397de3c4; WORD $0x01e5             // vextracti128    xmm5, ymm4, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0059e2c4; BYTE $0xe0               // vpshufb    xmm4, xmm4, xmm0
	LONG $0xe562d9c5                           // vpunpckldq    xmm4, xmm4, xmm5
	LONG $0x3865e3c4; WORD $0x01dc             // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                           // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9             // vpermq    ymm1, ymm1, 216
	QUAD $0x000000a08e7ffec5                   // vmovdqu    yword [rsi + 160], ymm1
	LONG $0xc0ff8141; WORD $0x0000; BYTE $0x00 // cmp    r15d, 192
	JE   LBB0_51
	QUAD $0x000003008f6ffec5                   // vmovdqu    ymm1, yword [rdi + 768]
	QUAD $0x00000320976ffec5                   // vmovdqu    ymm2, yword [rdi + 800]
	QUAD $0x000003409f6ffec5                   // vmovdqu    ymm3, yword [rdi + 832]
	QUAD $0x00000360a76ffec5                   // vmovdqu    ymm4, yword [rdi + 864]
	LONG $0xd172f5c5; BYTE $0x0f               // vpsrld    ymm1, ymm1, 15
	LONG $0xd272edc5; BYTE $0x0f               // vpsrld    ymm2, ymm2, 15
	LONG $0xd372e5c5; BYTE $0x0f               // vpsrld    ymm3, ymm3, 15
	LONG $0xd472ddc5; BYTE $0x0f               // vpsrld    ymm4, ymm4, 15
	LONG $0x397de3c4; WORD $0x01cd             // vextracti128    xmm5, ymm1, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xcd62f1c5                           // vpunpckldq    xmm1, xmm1, xmm5
	LONG $0x397de3c4; WORD $0x01d5             // vextracti128    xmm5, ymm2, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0xd562e9c5                           // vpunpckldq    xmm2, xmm2, xmm5
	LONG $0x397de3c4; WORD $0x01dd             // vextracti128    xmm5, ymm3, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0061e2c4; BYTE $0xd8               // vpshufb    xmm3, xmm3, xmm0
	LONG $0xdd62e1c5                           // vpunpckldq    xmm3, xmm3, xmm5
	LONG $0x397de3c4; WORD $0x01e5             // vextracti128    xmm5, ymm4, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0059e2c4; BYTE $0xe0               // vpshufb    xmm4, xmm4, xmm0
	LONG $0xe562d9c5                           // vpunpckldq    xmm4, xmm4, xmm5
	LONG $0x3865e3c4; WORD $0x01dc             // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xcb6cf5c5                           // vpunpcklqdq    ymm1, ymm1, ymm3
	LONG $0x00fde3c4; WORD $0xd8c9             // vpermq    ymm1, ymm1, 216
	QUAD $0x000000c08e7ffec5                   // vmovdqu    yword [rsi + 192], ymm1
	LONG $0xe0ff8141; WORD $0x0000; BYTE $0x00 // cmp    r15d, 224
	JE   LBB0_51
	QUAD $0x000003808f6ffec5                   // vmovdqu    ymm1, yword [rdi + 896]
	QUAD $0x000003a0976ffec5                   // vmovdqu    ymm2, yword [rdi + 928]
	QUAD $0x000003c09f6ffec5                   // vmovdqu    ymm3, yword [rdi + 960]
	QUAD $0x000003e0a76ffec5                   // vmovdqu    ymm4, yword [rdi + 992]
	LONG $0xd172f5c5; BYTE $0x0f               // vpsrld    ymm1, ymm1, 15
	LONG $0xd272edc5; BYTE $0x0f               // vpsrld    ymm2, ymm2, 15
	LONG $0xd372e5c5; BYTE $0x0f               // vpsrld    ymm3, ymm3, 15
	LONG $0xd472ddc5; BYTE $0x0f               // vpsrld    ymm4, ymm4, 15
	LONG $0x397de3c4; WORD $0x01cd             // vextracti128    xmm5, ymm1, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xcd62f1c5                           // vpunpckldq    xmm1, xmm1, xmm5
	LONG $0x397de3c4; WORD $0x01d5             // vextracti128    xmm5, ymm2, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0xd562e9c5                           // vpunpckldq    xmm2, xmm2, xmm5
	LONG $0x397de3c4; WORD $0x01dd             // vextracti128    xmm5, ymm3, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0061e2c4; BYTE $0xd8               // vpshufb    xmm3, xmm3, xmm0
	LONG $0xdd62e1c5                           // vpunpckldq    xmm3, xmm3, xmm5
	LONG $0x397de3c4; WORD $0x01e5             // vextracti128    xmm5, ymm4, 1
	LONG $0x0051e2c4; BYTE $0xe8               // vpshufb    xmm5, xmm5, xmm0
	LONG $0x0059e2c4; BYTE $0xc0               // vpshufb    xmm0, xmm4, xmm0
	LONG $0xc562f9c5                           // vpunpckldq    xmm0, xmm0, xmm5
	LONG $0x3865e3c4; WORD $0x01c0             // vinserti128    ymm0, ymm3, xmm0, 1
	LONG $0x3875e3c4; WORD $0x01ca             // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0xc06cf5c5                           // vpunpcklqdq    ymm0, ymm1, ymm0
	LONG $0x00fde3c4; WORD $0xd8c0             // vpermq    ymm0, ymm0, 216
	QUAD $0x000000e0867ffec5                   // vmovdqu    yword [rsi + 224], ymm0

LBB0_51:
	WORD $0x394d; BYTE $0xd7 // cmp    r15, r10
	JE   LBB0_56
	JMP  LBB0_52

LBB0_63:
	LONG $0xfce48349             // and    r12, -4
	LONG $0x322c8d4d             // lea    r13, [r10 + rsi]
	LONG $0x18c58349             // add    r13, 24
	WORD $0xc031                 // xor    eax, eax
	LONG $0x456ff9c5; BYTE $0x00 // vmovdqa    xmm0, oword 0[rbp] /* [rip + .LCPI0_0] */

LBB0_64:
	QUAD $0x000480878c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdi + 4*rax + 1152]
	LONG $0xd172f5c5; BYTE $0x0f               // vpsrld    ymm1, ymm1, 15
	LONG $0x397de3c4; WORD $0x01ca             // vextracti128    xmm2, ymm1, 1
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca62f1c5                           // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0xd679c1c4; WORD $0x054c; BYTE $0xe8 // vmovq    qword [r13 + rax - 24], xmm1
	QUAD $0x0004a0878c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdi + 4*rax + 1184]
	LONG $0xd172f5c5; BYTE $0x0f               // vpsrld    ymm1, ymm1, 15
	LONG $0x397de3c4; WORD $0x01ca             // vextracti128    xmm2, ymm1, 1
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca62f1c5                           // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0xd679c1c4; WORD $0x054c; BYTE $0xf0 // vmovq    qword [r13 + rax - 16], xmm1
	QUAD $0x0004c0878c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdi + 4*rax + 1216]
	LONG $0xd172f5c5; BYTE $0x0f               // vpsrld    ymm1, ymm1, 15
	LONG $0x397de3c4; WORD $0x01ca             // vextracti128    xmm2, ymm1, 1
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca62f1c5                           // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0xd679c1c4; WORD $0x054c; BYTE $0xf8 // vmovq    qword [r13 + rax - 8], xmm1
	QUAD $0x0004e0878c6ffec5; BYTE $0x00       // vmovdqu    ymm1, yword [rdi + 4*rax + 1248]
	LONG $0xd172f5c5; BYTE $0x0f               // vpsrld    ymm1, ymm1, 15
	LONG $0x397de3c4; WORD $0x01ca             // vextracti128    xmm2, ymm1, 1
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca62f1c5                           // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0xd679c1c4; WORD $0x054c; BYTE $0x00 // vmovq    qword [r13 + rax], xmm1
	LONG $0x20c08348                           // add    rax, 32
	LONG $0xfcc48349                           // add    r12, -4
	JNE  LBB0_64

LBB0_65:
	WORD $0x8548; BYTE $0xdb                   // test    rbx, rbx
	JE   LBB0_68
	LONG $0x02248d4d                           // lea    r12, [r10 + rax]
	WORD $0x0149; BYTE $0xf4                   // add    r12, rsi
	LONG $0x872c8d4c                           // lea    r13, [rdi + 4*rax]
	LONG $0x80c58149; WORD $0x0004; BYTE $0x00 // add    r13, 1152
	LONG $0x03e3c148                           // shl    rbx, 3
	WORD $0xc031                               // xor    eax, eax
	LONG $0x456ff9c5; BYTE $0x00               // vmovdqa    xmm0, oword 0[rbp] /* [rip + .LCPI0_0] */

LBB0_67:
	LONG $0x6f7ec1c4; WORD $0x854c; BYTE $0x00 // vmovdqu    ymm1, yword [r13 + 4*rax]
	LONG $0xd172f5c5; BYTE $0x0f               // vpsrld    ymm1, ymm1, 15
	LONG $0x397de3c4; WORD $0x01ca             // vextracti128    xmm2, ymm1, 1
	LONG $0x0069e2c4; BYTE $0xd0               // vpshufb    xmm2, xmm2, xmm0
	LONG $0x0071e2c4; BYTE $0xc8               // vpshufb    xmm1, xmm1, xmm0
	LONG $0xca62f1c5                           // vpunpckldq    xmm1, xmm1, xmm2
	LONG $0xd679c1c4; WORD $0x040c             // vmovq    qword [r12 + rax], xmm1
	LONG $0x08c08348                           // add    rax, 8
	WORD $0x3948; BYTE $0xc3                   // cmp    rbx, rax
	JNE  LBB0_67

LBB0_68:
	WORD $0x394d; BYTE $0xfe // cmp    r14, r15
	JNE  LBB0_69

LBB0_75:
	LONG $0xc0854566             // test    r8w, r8w
	JNE  LBB0_77
	LONG $0x1604c642; BYTE $0x01 // mov    byte [rsi + r10], 1

LBB0_77:
	LONG $0x1a894466 // mov    word [rdx], r11w
	LONG $0x09894466 // mov    word [rcx], r9w
	VZEROUPPER
	RET
