//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x000000ff000000ff
DATA LCDATA1<>+0x008(SB)/8, $0x000000ff000000ff
GLOBL LCDATA1<>(SB), 8, $16

TEXT Â·_prepareForCodeLenCode(SB), $0-32

	MOVQ h+0(FP), DI
	MOVQ dest+8(FP), SI
	MOVQ l+16(FP), DX
	MOVQ d+24(FP), CX
	LEAQ LCDATA1<>(SB), BP

	LONG $0x011dbf41; WORD $0x0000 // mov    r15d, 285

LBB0_1:
	LONG $0xbf3c8342; BYTE $0x00               // cmp    dword [rdi + 4*r15], 0
	JNE  LBB0_5
	LONG $0xff478d41                           // lea    eax, [r15 - 1]
	LONG $0x00873c83                           // cmp    dword [rdi + 4*rax], 0
	JNE  LBB0_6
	LONG $0xfec78349                           // add    r15, -2
	LONG $0xffff8341                           // cmp    r15d, -1
	JNE  LBB0_1
	WORD $0x3145; BYTE $0xff                   // xor    r15d, r15d
	LONG $0x1eb84166; BYTE $0x00               // mov    r8w, 30
	LONG $0x04f4bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1268], 0
	JNE  LBB0_36
	JMP  LBB0_7

LBB0_5:
	LONG $0x01c78341                           // add    r15d, 1
	LONG $0x1eb84166; BYTE $0x00               // mov    r8w, 30
	LONG $0x04f4bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1268], 0
	JNE  LBB0_36
	JMP  LBB0_7

LBB0_6:
	LONG $0xffc78341                           // add    r15d, -1
	LONG $0x01c78341                           // add    r15d, 1
	LONG $0x1eb84166; BYTE $0x00               // mov    r8w, 30
	LONG $0x04f4bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1268], 0
	JNE  LBB0_36

LBB0_7:
	LONG $0x1db84166; BYTE $0x00               // mov    r8w, 29
	LONG $0x04f0bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1264], 0
	JNE  LBB0_36
	LONG $0x1cb84166; BYTE $0x00               // mov    r8w, 28
	LONG $0x04ecbf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1260], 0
	JNE  LBB0_36
	LONG $0x1bb84166; BYTE $0x00               // mov    r8w, 27
	LONG $0x04e8bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1256], 0
	JNE  LBB0_36
	LONG $0x1ab84166; BYTE $0x00               // mov    r8w, 26
	LONG $0x04e4bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1252], 0
	JNE  LBB0_36
	LONG $0x19b84166; BYTE $0x00               // mov    r8w, 25
	LONG $0x04e0bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1248], 0
	JNE  LBB0_36
	LONG $0x18b84166; BYTE $0x00               // mov    r8w, 24
	LONG $0x04dcbf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1244], 0
	JNE  LBB0_36
	LONG $0x17b84166; BYTE $0x00               // mov    r8w, 23
	LONG $0x04d8bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1240], 0
	JNE  LBB0_36
	LONG $0x16b84166; BYTE $0x00               // mov    r8w, 22
	LONG $0x04d4bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1236], 0
	JNE  LBB0_36
	LONG $0x15b84166; BYTE $0x00               // mov    r8w, 21
	LONG $0x04d0bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1232], 0
	JNE  LBB0_36
	LONG $0x14b84166; BYTE $0x00               // mov    r8w, 20
	LONG $0x04ccbf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1228], 0
	JNE  LBB0_36
	LONG $0x13b84166; BYTE $0x00               // mov    r8w, 19
	LONG $0x04c8bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1224], 0
	JNE  LBB0_36
	LONG $0x12b84166; BYTE $0x00               // mov    r8w, 18
	LONG $0x04c4bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1220], 0
	JNE  LBB0_36
	LONG $0x11b84166; BYTE $0x00               // mov    r8w, 17
	LONG $0x04c0bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1216], 0
	JNE  LBB0_36
	LONG $0x10b84166; BYTE $0x00               // mov    r8w, 16
	LONG $0x04bcbf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1212], 0
	JNE  LBB0_36
	LONG $0x0fb84166; BYTE $0x00               // mov    r8w, 15
	LONG $0x04b8bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1208], 0
	JNE  LBB0_36
	LONG $0x0eb84166; BYTE $0x00               // mov    r8w, 14
	LONG $0x04b4bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1204], 0
	JNE  LBB0_36
	LONG $0x0db84166; BYTE $0x00               // mov    r8w, 13
	LONG $0x04b0bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1200], 0
	JNE  LBB0_36
	LONG $0x0cb84166; BYTE $0x00               // mov    r8w, 12
	LONG $0x04acbf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1196], 0
	JNE  LBB0_36
	LONG $0x0bb84166; BYTE $0x00               // mov    r8w, 11
	LONG $0x04a8bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1192], 0
	JNE  LBB0_36
	LONG $0x0ab84166; BYTE $0x00               // mov    r8w, 10
	LONG $0x04a4bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1188], 0
	JNE  LBB0_36
	LONG $0x09b84166; BYTE $0x00               // mov    r8w, 9
	LONG $0x04a0bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1184], 0
	JNE  LBB0_36
	LONG $0x08b84166; BYTE $0x00               // mov    r8w, 8
	LONG $0x049cbf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1180], 0
	JNE  LBB0_36
	LONG $0x07b84166; BYTE $0x00               // mov    r8w, 7
	LONG $0x0498bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1176], 0
	JNE  LBB0_36
	LONG $0x06b84166; BYTE $0x00               // mov    r8w, 6
	LONG $0x0494bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1172], 0
	JNE  LBB0_36
	LONG $0x05b84166; BYTE $0x00               // mov    r8w, 5
	LONG $0x0490bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1168], 0
	JNE  LBB0_36
	LONG $0x04b84166; BYTE $0x00               // mov    r8w, 4
	LONG $0x048cbf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1164], 0
	JNE  LBB0_36
	LONG $0x03b84166; BYTE $0x00               // mov    r8w, 3
	LONG $0x0488bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1160], 0
	JNE  LBB0_36
	LONG $0x02b84166; BYTE $0x00               // mov    r8w, 2
	LONG $0x0484bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1156], 0
	JNE  LBB0_36
	WORD $0x3145; BYTE $0xc0                   // xor    r8d, r8d
	LONG $0x0480bf83; WORD $0x0000; BYTE $0x00 // cmp    dword [rdi + 1152], 0
	LONG $0xc0950f41                           // setne    r8b

LBB0_36:
	LONG $0xc0854566               // test    r8w, r8w
	LONG $0x0001b941; WORD $0x0000 // mov    r9d, 1
	LONG $0xc8450f45               // cmovne    r9d, r8d
	LONG $0xff854566               // test    r15w, r15w
	JE   LBB0_39
	LONG $0xd7b70f45               // movzx    r10d, r15w
	LONG $0xff834166; BYTE $0x08   // cmp    r15w, 8
	JB   LBB0_38
	LONG $0x97048d4a               // lea    rax, [rdi + 4*r10]
	WORD $0x3948; BYTE $0xf0       // cmp    rax, rsi
	JBE  LBB0_43
	LONG $0x16048d4a               // lea    rax, [rsi + r10]
	WORD $0x3948; BYTE $0xf8       // cmp    rax, rdi
	JBE  LBB0_43

LBB0_38:
	WORD $0x3145; BYTE $0xe4 // xor    r12d, r12d

LBB0_49:
	WORD $0x894d; BYTE $0xe3 // mov    r11, r12
	WORD $0xf749; BYTE $0xd3 // not    r11
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_51

LBB0_50:
	LONG $0xa71c8b42         // mov    ebx, dword [rdi + 4*r12]
	WORD $0xebc1; BYTE $0x0f // shr    ebx, 15
	LONG $0x261c8842         // mov    byte [rsi + r12], bl
	LONG $0x01c48349         // add    r12, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_50

LBB0_51:
	LONG $0x03fb8349 // cmp    r11, 3
	JB   LBB0_53

LBB0_52:
	LONG $0xa7048b42             // mov    eax, dword [rdi + 4*r12]
	WORD $0xe8c1; BYTE $0x0f     // shr    eax, 15
	LONG $0x26048842             // mov    byte [rsi + r12], al
	LONG $0xa7448b42; BYTE $0x04 // mov    eax, dword [rdi + 4*r12 + 4]
	WORD $0xe8c1; BYTE $0x0f     // shr    eax, 15
	LONG $0x26448842; BYTE $0x01 // mov    byte [rsi + r12 + 1], al
	LONG $0xa7448b42; BYTE $0x08 // mov    eax, dword [rdi + 4*r12 + 8]
	WORD $0xe8c1; BYTE $0x0f     // shr    eax, 15
	LONG $0x26448842; BYTE $0x02 // mov    byte [rsi + r12 + 2], al
	LONG $0xa7448b42; BYTE $0x0c // mov    eax, dword [rdi + 4*r12 + 12]
	WORD $0xe8c1; BYTE $0x0f     // shr    eax, 15
	LONG $0x26448842; BYTE $0x03 // mov    byte [rsi + r12 + 3], al
	LONG $0x04c48349             // add    r12, 4
	WORD $0x394d; BYTE $0xe2     // cmp    r10, r12
	JNE  LBB0_52
	JMP  LBB0_53

LBB0_39:
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB0_53:
	LONG $0xd9b70f45                           // movzx    r11d, r9w
	LONG $0xfb834166; BYTE $0x04               // cmp    r11w, 4
	JB   LBB0_54
	LONG $0x16048d4a                           // lea    rax, [rsi + r10]
	LONG $0x9f1c8d4a                           // lea    rbx, [rdi + 4*r11]
	LONG $0x80c38148; WORD $0x0004; BYTE $0x00 // add    rbx, 1152
	WORD $0x3948; BYTE $0xd8                   // cmp    rax, rbx
	JAE  LBB0_58
	LONG $0x1a048d4b                           // lea    rax, [r10 + r11]
	WORD $0x0148; BYTE $0xf0                   // add    rax, rsi
	LONG $0x809f8d48; WORD $0x0004; BYTE $0x00 // lea    rbx, [rdi + 1152]
	WORD $0x3948; BYTE $0xd8                   // cmp    rax, rbx
	JBE  LBB0_58

LBB0_54:
	WORD $0x3145; BYTE $0xf6 // xor    r14d, r14d

LBB0_66:
	WORD $0x894d; BYTE $0xf5 // mov    r13, r14
	WORD $0xf749; BYTE $0xd5 // not    r13
	WORD $0x014d; BYTE $0xdd // add    r13, r11
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0x03e08348         // and    rax, 3
	JE   LBB0_69
	LONG $0x16248d4e         // lea    r12, [rsi + r10]

LBB0_68:
	QUAD $0x00000480b79c8b42 // mov    ebx, dword [rdi + 4*r14 + 1152]
	WORD $0xebc1; BYTE $0x0f // shr    ebx, 15
	LONG $0x341c8843         // mov    byte [r12 + r14], bl
	LONG $0x01c68349         // add    r14, 1
	LONG $0xffc08348         // add    rax, -1
	JNE  LBB0_68

LBB0_69:
	LONG $0x03fd8349 // cmp    r13, 3
	JB   LBB0_72
	LONG $0x32048d49 // lea    rax, [r10 + rsi]
	LONG $0x03c08348 // add    rax, 3

LBB0_71:
	QUAD $0x00000480b79c8b42     // mov    ebx, dword [rdi + 4*r14 + 1152]
	WORD $0xebc1; BYTE $0x0f     // shr    ebx, 15
	LONG $0x305c8842; BYTE $0xfd // mov    byte [rax + r14 - 3], bl
	QUAD $0x00000484b79c8b42     // mov    ebx, dword [rdi + 4*r14 + 1156]
	WORD $0xebc1; BYTE $0x0f     // shr    ebx, 15
	LONG $0x305c8842; BYTE $0xfe // mov    byte [rax + r14 - 2], bl
	QUAD $0x00000488b79c8b42     // mov    ebx, dword [rdi + 4*r14 + 1160]
	WORD $0xebc1; BYTE $0x0f     // shr    ebx, 15
	LONG $0x305c8842; BYTE $0xff // mov    byte [rax + r14 - 1], bl
	QUAD $0x0000048cb79c8b42     // mov    ebx, dword [rdi + 4*r14 + 1164]
	WORD $0xebc1; BYTE $0x0f     // shr    ebx, 15
	LONG $0x301c8842             // mov    byte [rax + r14], bl
	LONG $0x04c68349             // add    r14, 4
	WORD $0x394d; BYTE $0xf3     // cmp    r11, r14
	JNE  LBB0_71
	JMP  LBB0_72

LBB0_58:
	WORD $0x8945; BYTE $0xde // mov    r14d, r11d
	LONG $0xfce68341         // and    r14d, -4
	LONG $0xfc468d49         // lea    rax, [r14 - 4]
	WORD $0x8949; BYTE $0xc4 // mov    r12, rax
	LONG $0x02ecc149         // shr    r12, 2
	LONG $0x01c48349         // add    r12, 1
	WORD $0x8944; BYTE $0xe3 // mov    ebx, r12d
	WORD $0xe383; BYTE $0x03 // and    ebx, 3
	LONG $0x0cf88348         // cmp    rax, 12
	JAE  LBB0_60
	WORD $0xc031             // xor    eax, eax
	JMP  LBB0_62

LBB0_43:
	WORD $0x8945; BYTE $0xd4     // mov    r12d, r10d
	LONG $0xf8e48341             // and    r12d, -8
	LONG $0x24448d49; BYTE $0xf8 // lea    rax, [r12 - 8]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x03ebc149             // shr    r11, 3
	LONG $0x01c38349             // add    r11, 1
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB0_75
	WORD $0x894d; BYTE $0xde     // mov    r14, r11
	LONG $0xfee68349             // and    r14, -2
	WORD $0xc031                 // xor    eax, eax
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI0_0] */

LBB0_45:
	LONG $0x0c6f0ff3; BYTE $0x87   // movdqu    xmm1, oword [rdi + 4*rax]
	LONG $0x546f0ff3; WORD $0x1087 // movdqu    xmm2, oword [rdi + 4*rax + 16]
	LONG $0xd1720f66; BYTE $0x0f   // psrld    xmm1, 15
	LONG $0xd2720f66; BYTE $0x0f   // psrld    xmm2, 15
	LONG $0xc8db0f66               // pand    xmm1, xmm0
	LONG $0xc9670f66               // packuswb    xmm1, xmm1
	LONG $0xc9670f66               // packuswb    xmm1, xmm1
	LONG $0xd0db0f66               // pand    xmm2, xmm0
	LONG $0xd2670f66               // packuswb    xmm2, xmm2
	LONG $0xd2670f66               // packuswb    xmm2, xmm2
	LONG $0x0c7e0f66; BYTE $0x06   // movd    dword [rsi + rax], xmm1
	LONG $0x547e0f66; WORD $0x0406 // movd    dword [rsi + rax + 4], xmm2
	LONG $0x4c6f0ff3; WORD $0x2087 // movdqu    xmm1, oword [rdi + 4*rax + 32]
	LONG $0x546f0ff3; WORD $0x3087 // movdqu    xmm2, oword [rdi + 4*rax + 48]
	LONG $0xd1720f66; BYTE $0x0f   // psrld    xmm1, 15
	LONG $0xd2720f66; BYTE $0x0f   // psrld    xmm2, 15
	LONG $0xc8db0f66               // pand    xmm1, xmm0
	LONG $0xc9670f66               // packuswb    xmm1, xmm1
	LONG $0xc9670f66               // packuswb    xmm1, xmm1
	LONG $0xd0db0f66               // pand    xmm2, xmm0
	LONG $0xd2670f66               // packuswb    xmm2, xmm2
	LONG $0xd2670f66               // packuswb    xmm2, xmm2
	LONG $0x4c7e0f66; WORD $0x0806 // movd    dword [rsi + rax + 8], xmm1
	LONG $0x547e0f66; WORD $0x0c06 // movd    dword [rsi + rax + 12], xmm2
	LONG $0x10c08348               // add    rax, 16
	LONG $0xfec68349               // add    r14, -2
	JNE  LBB0_45
	LONG $0x01c3f641               // test    r11b, 1
	JE   LBB0_48

LBB0_47:
	LONG $0x046f0ff3; BYTE $0x87   // movdqu    xmm0, oword [rdi + 4*rax]
	LONG $0x4c6f0ff3; WORD $0x1087 // movdqu    xmm1, oword [rdi + 4*rax + 16]
	LONG $0xd0720f66; BYTE $0x0f   // psrld    xmm0, 15
	LONG $0xd1720f66; BYTE $0x0f   // psrld    xmm1, 15
	LONG $0x556f0f66; BYTE $0x00   // movdqa    xmm2, oword 0[rbp] /* [rip + .LCPI0_0] */
	LONG $0xc2db0f66               // pand    xmm0, xmm2
	LONG $0xc0670f66               // packuswb    xmm0, xmm0
	LONG $0xc0670f66               // packuswb    xmm0, xmm0
	LONG $0xcadb0f66               // pand    xmm1, xmm2
	LONG $0xc9670f66               // packuswb    xmm1, xmm1
	LONG $0xc9670f66               // packuswb    xmm1, xmm1
	LONG $0x047e0f66; BYTE $0x06   // movd    dword [rsi + rax], xmm0
	LONG $0x4c7e0f66; WORD $0x0406 // movd    dword [rsi + rax + 4], xmm1

LBB0_48:
	WORD $0x394d; BYTE $0xd4 // cmp    r12, r10
	JE   LBB0_53
	JMP  LBB0_49

LBB0_60:
	LONG $0xfce48349             // and    r12, -4
	LONG $0x322c8d4d             // lea    r13, [r10 + rsi]
	LONG $0x0cc58349             // add    r13, 12
	WORD $0xc031                 // xor    eax, eax
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI0_0] */

LBB0_61:
	QUAD $0x000480878c6f0ff3; BYTE $0x00       // movdqu    xmm1, oword [rdi + 4*rax + 1152]
	LONG $0xd1720f66; BYTE $0x0f               // psrld    xmm1, 15
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xc9670f66                           // packuswb    xmm1, xmm1
	LONG $0xc9670f66                           // packuswb    xmm1, xmm1
	LONG $0x7e0f4166; WORD $0x054c; BYTE $0xf4 // movd    dword [r13 + rax - 12], xmm1
	QUAD $0x000490878c6f0ff3; BYTE $0x00       // movdqu    xmm1, oword [rdi + 4*rax + 1168]
	LONG $0xd1720f66; BYTE $0x0f               // psrld    xmm1, 15
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xc9670f66                           // packuswb    xmm1, xmm1
	LONG $0xc9670f66                           // packuswb    xmm1, xmm1
	LONG $0x7e0f4166; WORD $0x054c; BYTE $0xf8 // movd    dword [r13 + rax - 8], xmm1
	QUAD $0x0004a0878c6f0ff3; BYTE $0x00       // movdqu    xmm1, oword [rdi + 4*rax + 1184]
	LONG $0xd1720f66; BYTE $0x0f               // psrld    xmm1, 15
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xc9670f66                           // packuswb    xmm1, xmm1
	LONG $0xc9670f66                           // packuswb    xmm1, xmm1
	LONG $0x7e0f4166; WORD $0x054c; BYTE $0xfc // movd    dword [r13 + rax - 4], xmm1
	QUAD $0x0004b0878c6f0ff3; BYTE $0x00       // movdqu    xmm1, oword [rdi + 4*rax + 1200]
	LONG $0xd1720f66; BYTE $0x0f               // psrld    xmm1, 15
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xc9670f66                           // packuswb    xmm1, xmm1
	LONG $0xc9670f66                           // packuswb    xmm1, xmm1
	LONG $0x7e0f4166; WORD $0x054c; BYTE $0x00 // movd    dword [r13 + rax], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0xfcc48349                           // add    r12, -4
	JNE  LBB0_61

LBB0_62:
	WORD $0x8548; BYTE $0xdb                   // test    rbx, rbx
	JE   LBB0_65
	LONG $0x02248d4d                           // lea    r12, [r10 + rax]
	WORD $0x0149; BYTE $0xf4                   // add    r12, rsi
	LONG $0x872c8d4c                           // lea    r13, [rdi + 4*rax]
	LONG $0x80c58149; WORD $0x0004; BYTE $0x00 // add    r13, 1152
	LONG $0x02e3c148                           // shl    rbx, 2
	WORD $0xc031                               // xor    eax, eax
	LONG $0x456f0f66; BYTE $0x00               // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI0_0] */

LBB0_64:
	LONG $0x6f0f41f3; WORD $0x854c; BYTE $0x00 // movdqu    xmm1, oword [r13 + 4*rax]
	LONG $0xd1720f66; BYTE $0x0f               // psrld    xmm1, 15
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xc9670f66                           // packuswb    xmm1, xmm1
	LONG $0xc9670f66                           // packuswb    xmm1, xmm1
	LONG $0x7e0f4166; WORD $0x040c             // movd    dword [r12 + rax], xmm1
	LONG $0x04c08348                           // add    rax, 4
	WORD $0x3948; BYTE $0xc3                   // cmp    rbx, rax
	JNE  LBB0_64

LBB0_65:
	WORD $0x394d; BYTE $0xde // cmp    r14, r11
	JNE  LBB0_66

LBB0_72:
	LONG $0xc0854566             // test    r8w, r8w
	JNE  LBB0_74
	LONG $0x1604c642; BYTE $0x01 // mov    byte [rsi + r10], 1

LBB0_74:
	LONG $0x3a894466 // mov    word [rdx], r15w
	LONG $0x09894466 // mov    word [rcx], r9w
	RET

LBB0_75:
	WORD $0xc031     // xor    eax, eax
	LONG $0x01c3f641 // test    r11b, 1
	JNE  LBB0_47
	JMP  LBB0_48
